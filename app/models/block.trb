class Block
  include ActiveModel::API
  include ActiveModel::Validations
  include ActiveModel::Serializers::JSON

  include Turbo::Broadcastable

  include StringConcern

  attr_accessor :baseFeePerGas, :difficulty, :extraData, :gasLimit, :gasUsed, :hash,
                :logsBloom, :miner, :mixHash, :nonce, :number, :parentHash, :receiptsRoot,
                :sha3Uncles, :size, :stateRoot, :timestamp, :transactionsRoot, :withdrawals, 
                :withdrawalsRoot, :transactions, :totalDifficulty, :uncles
  
  validates :hash, presence: true

  def attributes
    {
      hash: hash,
      number: number,
      timestamp: timestamp,
      miner: miner,
      transactions: transactions,
      withdrawals: withdrawals,
      baseFeePerGas: baseFeePerGas,
      totalDifficulty: totalDifficulty,
      size: size,
    }
  end

  def totalDifficulty=(value)
    @totalDifficulty = value.class == Integer ? value : value.to_i(16) rescue nil
  end

  def size=(value)
    @size = value.class == Integer ? value : value.to_i(16)
  end

  def number=(value)
    @number = value.class == Integer ? value : value.to_i(16)
  end

  def baseFeePerGas=(value)
    @baseFeePerGas = value.class == Integer ? value : value.to_i(16)
  end

  def datetime
    Time.at(self.timestamp)
  end

  def timestamp=(value)
    @timestamp = value.class == Integer ? value : value.to_i(16)
  end

  def transactions=(value)
    @transactions = value ? value : []
  end

  def broadcast_to_channel
    ActionCable.server.broadcast('block_channel', { block: self })
  end

  def self.from_event(event)
    block_data = event&.dig("params", "result")
    return unless block_data
    Block.new(**block_data)
  end

  def seconds_ago
    current_timestamp - self.timestamp
  end

  private
    def current_timestamp
      Time.now.to_i
    end
end
